@file:JsModule("mocha")

package mocha.mocha

import nodejs.EventEmitter
import kotlin.ts.Union

/**
 * Initialize a new `Runnable` with the given `title` and callback `fn`.
 *
 * See https://mochajs.org/api/Runnable.html
 */
open external class Runnable : EventEmitter {
  constructor(title: String, fn: Func = definedExternally)
  constructor(title: String, fn: AsyncFunc = definedExternally)

  var id: String
  var title: String
  var fn: Union<Func, AsyncFunc>? // Func | AsyncFunc | undefined
  var body: String
  var async: Boolean
  var sync: Boolean
  var timedOut: Boolean
  var pending: Boolean
  var duration: Int?
  var parent: Suite?
  var state: RunnableState?
  var timer: Any?
  var ctx: Context?
  var callback: Done?
  var allowUncaught: Boolean?
  var file: String?

  /**
   * Get test timeout.
   *
   * See https://mochajs.org/api/Runnable.html#timeout
   */
  fun timeout(): Int

  /**
   * Set test timeout.
   *
   * See https://mochajs.org/api/Runnable.html#timeout
   */
  fun timeout(ms: String) // this

  fun timeout(ms: Int) // this

  /**
   * Get test slowness threshold.
   *
   * See https://mochajs.org/api/Runnable.html#slow
   */
  fun slow(): Int

  /**
   * Set test slowness threshold.
   *
   * See https://mochajs.org/api/Runnable.html#slow
   */
  fun slow(ms: String) // this

  fun slow(ms: Int) // this

  /**
   * Halt and mark as pending.
   */
  fun skip(): Nothing

  /**
   * Check if this runnable or its parent suite is marked as pending.
   *
   * See https://mochajs.org/api/Runnable.html#isPending
   */
  fun isPending(): Boolean

  /**
   * Return `true` if this Runnable has failed.
   */
  fun isFailed(): Boolean

  /**
   * Return `true` if this Runnable has passed.
   */
  fun isPassed(): Boolean

  /**
   * Set or get number of retries.
   *
   * See https://mochajs.org/api/Runnable.html#retries
   */
  fun retries(): Int

  /**
   * Set or get number of retries.
   *
   * See https://mochajs.org/api/Runnable.html#retries
   */
  fun retries(n: Int)

  /**
   * Set or get current retry
   *
   * See https://mochajs.org/api/Runnable.html#currentRetry
   */
  fun currentRetry(): Int

  /**
   * Set or get current retry
   *
   * See https://mochajs.org/api/Runnable.html#currentRetry
   */
  fun currentRetry(n: Int)

  /**
   * Return the full title generated by recursively concatenating the parent's full title.
   */
  fun fullTitle(): String

  /**
   * Return the title path generated by concatenating the parent's title path with the title.
   */
  fun titlePath(): Array<String>

  /**
   * Clear the timeout.
   *
   * See https://mochajs.org/api/Runnable.html#clearTimeout
   */
  fun clearTimeout()

  /**
   * Inspect the runnable void of private properties.
   *
   * See https://mochajs.org/api/Runnable.html#inspect
   */
  fun inspect(): String

  /**
   * Reset the timeout.
   *
   * See https://mochajs.org/api/Runnable.html#resetTimeout
   */
  fun resetTimeout()

  /**
   * Get a list of whitelisted globals for this test run.
   *
   * See https://mochajs.org/api/Runnable.html#globals
   */
  fun globals(): Array<String>

  /**
   * Set a list of whitelisted globals for this test run.
   *
   * See https://mochajs.org/api/Runnable.html#globals
   */
  fun globals(globals: js.array.ReadonlyArray<String>)

  /**
   * Run the test and invoke `fn(err)`.
   *
   * See https://mochajs.org/api/Runnable.html#run
   */
  fun run(fn: Done)

  fun on(event: String /* "error" */, listener: (error: Any?) -> Unit) // this

  fun on(event: String, listener: Function<Unit> /* (...args: any[]) => void */) // this

  fun once(event: String /* "error" */, listener: (error: Any?) -> Unit) // this

  fun once(event: String, listener: Function<Unit> /* (...args: any[]) => void */) // this

  fun addListener(event: String /* "error" */, listener: (error: Any?) -> Unit) // this

  fun addListener(event: String, listener: Function<Unit> /* (...args: any[]) => void */) // this

  fun removeListener(event: String /* "error" */, listener: (error: Any?) -> Unit) // this

  fun removeListener(event: String, listener: Function<Unit> /* (...args: any[]) => void */) // this

  fun prependListener(event: String /* "error" */, listener: (error: Any?) -> Unit) // this

  fun prependListener(event: String, listener: Function<Unit> /* (...args: any[]) => void */) // this

  fun prependOnceListener(event: String /* "error" */, listener: (error: Any?) -> Unit) // this

  fun prependOnceListener(event: String, listener: Function<Unit> /* (...args: any[]) => void */) // this

  fun emit(name: String /* "error" */, error: Any?): Boolean

  fun emit(
    name: String,
    vararg args: Any?,
  ): Boolean
}
