@file:JsModule("@zowe/cli")

package zowe.cli.zosfiles.edit

import js.array.JsTuple2
import js.promise.Promise
import node.buffer.Buffer
import zowe.cli.zosfiles.compare.CompareBaseHelper
import zowe.imperative.cmd.doc.handler.IHandlerParameters
import zowe.imperative.rest.session.AbstractSession
import zowe.sdk.zos.files.doc.IZosFilesResponse

/**
 * A shared utility class that uss and ds handlers use for local file editing
 */
external class EditUtilities {
  companion object {
    /**
     * Builds a temp path where local file will be saved. If uss file, file name will be hashed
     * to prevent any conflicts with file naming. A given filename will always result in the
     * same unique file path.
     * @param lfFile object containing pertinent information about the local file during the editing process
     * @return returns unique file path for temp file
     */
    fun buildTempPath(
      lfFile: ILocalFile,
      commandParameters: IHandlerParameters,
    ): Promise<String>

    /**
     * Check for temp path's existence (check if previously 'stashed'/temp edits exist)
     * @param tempPath unique file path for local file (stash/temp file)
     * @return promise that resolves to true if stash exists or false if doesn't
     */
    fun checkForStash(tempPath: String): Promise<Boolean>

    /**
     * Collection of prompts to be used at different points in editing process
     * @param prompt selected prompt from [Prompt] (enum object)
     * @param conflict optional. true if detected conflict between local and remote files
     * @return promise whose resolution depends on user input
     */
    fun promptUser(
      prompt: Prompt,
      conflict: Boolean = definedExternally,
    ): Promise<Boolean>

    /**
     * Download file and determine if downloading just to get etag (useStash) or to save file locally & get etag (!useStash)
     * @param session the session object generated from the connected profile
     * @param lfFile object containing pertinent information about the local file during the editing process
     * @param useStash should be true if don't want to overwrite local file when refreshing etag
     */
    fun localDownload(
      session: AbstractSession,
      lfFile: ILocalFile,
      useStash: Boolean,
    ): Promise<ILocalFile>

    /**
     * Performs appropriate file comparison (either in browser or as a terminal diff) between local file and remote
     * Local file (lf) will then be opened in default editor
     * @param session the session object generated from the connected profile
     * @param commandParameters parameters supplied by args
     * @param lfFile object containing pertinent information about the local file during the editing process
     * @param promptUser optional. if there are changes then prompt user to show diff, otherwise return
     * @return the response generated by [CompareBaseHelper.getResponse]
     */
    fun fileComparison(
      session: AbstractSession,
      commandParameters: IHandlerParameters,
      lfFile: ILocalFile,
      promptUser: Boolean = definedExternally,
    ): Promise<IZosFilesResponse<Any?>>

    /**
     * Enable user to make their edits and wait for user input to indicate editing is complete
     * @param lfFile object containing pertinent information about the local file during the editing process
     * @param editor optional parameter originally supplied by args
     */
    fun makeEdits(
      lfFile: ILocalFile,
      editor: String = definedExternally,
    ): Promise<Boolean>

    /**
     * Upload temp file with saved etag
     *  - if matching etag: successful upload, destroy stash/temp -> END
     *  - if non-matching etag: unsuccessful upload -> refresh etag -> perform file comparison/edit -> re-attempt upload
     * @param session the session object generated from the connected profile
     * @param commandParameters parameters supplied by args
     * @param lfFile object containing pertinent information about the local file during the editing process
     * @return Promise<{boolean, boolean}> -
     *   {resolves to true if uploading was successful and false if not,
     *    resolves to true if user wishes to cancel command and false if not}
     */
    fun uploadEdits(
      session: AbstractSession,
      commandParameters: IHandlerParameters,
      lfFile: ILocalFile,
    ): Promise<JsTuple2<Boolean, Boolean>>

    /**
     * When changes occur in the remote file, user will have to overwrite remote or account for the discrepancy between files
     * @param session the session object generated from the connected profile
     * @param commandParameters parameters supplied by args
     * @param lfFile object containing pertinent information about the local file during the editing process
     * @return returns a boolean where true means command is canceled and false means continue
     */
    fun etagMismatch(
      session: AbstractSession,
      commandParameters: IHandlerParameters,
      lfFile: ILocalFile,
    ): Promise<JsTuple2<Boolean, Buffer>>

    /**
     * Destroy path of temporary local file (remove stash)
     * @param tempPath unique file path for local file (stash)
     */
    fun destroyTempFile(tempPath: String): Promise<Unit>
  }
}
